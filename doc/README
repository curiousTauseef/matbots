A bot is completely described by its state vector.  The state vector is
actually a 1 by 9 cell array.  The states are:

%1 xpos    (double precision)
%2 ypos    (double precision)
%3 health  (double precision)
%4 energy  (double precision)
%5 team    (string)
%6 num     (integer)
%7 name    (string)
%8 heading (double precision)
%9 color   (string)

xpos, ypos, health, and energy should be obvious.
If your health is less than or equal to zero, your bot is dead and is removed
from the game.

Energy on the other hand is the fuel used to execute ANY action: movement,
shooting, dropping a mine, etc.  If your energy is zero, you can't do anything
but wait (energy slowly regenerates).

team is a string that identifies which team you bot is playing on.

num is a UNIQUE number assigned to each bot during a game.  This number will
never change during a game.  If a bot dies, the player numbers are not
adjusted.  Example:  If there are 4 players at the beginning of a game, they
are assigned numbers 1 through 4.  If player 3 dies, the player numbers remain
as 1, 2 and 4.  Player 4 is NOT changed into player 3.  While this seems
trivial, it has been the cause of many a bot programming error.

name is the same as your bot function name.

heading is a number between -pi and pi that describes the direction your bot
is facing.  A heading of 0 represents facing to the right, east, or the
positive x direction.

color is simply the color that the engine is using to plot your bot.

Bots are functions.  They accept 4 arguments.  They return 3 outputs.  The
basic syntax is as follows (this is the first line of the goose bot):

function [deltaH throttle action] = goose(state,player,objects,req)

state is an 1 x n object array.  The n objects happen to be the state vectors
for all the OTHER bots in the game.  So, for example, if there were 3 other
bots in the game other than your bot, state would consist of 3 1x9 cell
arrays.  To access the information in a cell array, use squiggly brackets.

Example: If you were interested in the health of the 2nd bot in the list, you
would want

state{2}{3}

Note the squiggly brackets.  Notice also that this is not necessarily the
health of player #2.  Rather, this is the health of the 2nd bot in the
list...which may be player 13 if several bots have already died and have been
removed from the player list.  To get the player number of the 2nd bot in the
list, you would want

state{2}{6}

player is YOUR state vector (1x9 cell array).  player{1} is YOUR x position.
player{2} is YOUR y position...etc.

objects is an array containing information about all the various objects that
are in the playing field.  Right now, the only objects we have implemented
are 'rifle' and 'mine'.  Currently, mines cannot be sensed.  So, the only type
of object is 'rifle'.  The first element in each object array is the name of
the object (the type).  Right now, the first element of each object
is 'rifle'.  The 'rifle' state vector is:

%1 name  (in this case, 'rifle')
%2 xpos
%3 ypos
%4 heading
%5 team

If you knew the 3rd object in the list was a 'rifle' and you were interested
in which team fired it, you would want

objects{3}{5}

...which would return a string.

req is a dummy variable used by the engine.  Don't worry about it.

The outputs that are returned are:

deltaH - a CHANGE in heading angle (radians).  If your current heading is pi/3
and you wish your heading to be pi/6, your deltaH would need to be -pi/6. The
maximum deltaH is stored in a variable called deltaH_max which is in the
engine_settings.m file.

throttle - a commanded speed.  A positive throttle value represents motion in
the direction of your heading.  throttle should be a number between -1 and 1.
A throttle value of 1 will move your bot at a speed of 1 unit per second.  The
timestep is stored in a variable called ts which is in the engine_settings.m
file.  The energy per timestep required for a throttle setting of 1 is
move_cost.

action - a string.  Right now, the permissible actions are:

'rifle' - fires a bullet along your heading.
The speed of the bullet is: rifle_speed
The radius of the bullet is: rifle_radius
The damage cosed by a hit is: rifle_damage
The energy required to fire a bullet is: rifle_cost
All these variables are in engine_settings.m

'mine' - drops a mine at your location.  The mine explodes when a player comes
within its radius.  The blast radius is equal to the detection radius.
The radius of the mine is: mine_radius
The damage caused by a mine is: mine_damage
The energy required to drop a mine is: mine_cost
Again, these are all in engine_settings.m

If you wish to perform no action, simply return something like
action = 'none'

To set up a game, edit the file called player_list.txt
This file should contain a bot name and a bot team name on each line.  For
example:

sniper a
sniper a
sniper a
goose b
goose b
goose b

The above player_list.txt file would set up a game of three sniper bots on
team "a" against three goose bots on team "b".  Any combination of bots and
teams is allowed.

To start a game, simply execute the file: engine.m

The size of the game map is given in a 1x4 vector called: world
world = [minX maxX minY maxY]
This vector, like everything else, is in engine_settings.m

I recommend calling engine_settings at the beginning of your bot function so
you can have access to all this information.

Also useful is the strcmp function which compares two strings and returns 1 if
they are the same.  This is useful for seeing if a bot is on your team or if
an object is a rifle or a mine or whatever.

IMPORTANT:
The engine does the following things in the following order at each timestep:
1) Changes your heading by deltaH
2) Executes your action ('rifle', 'mine', etc)
3) Moves your bot a distance of throttle*ts
4) Moves objects and causes damages where necessary

This means that your bot will change heading FIRST, fire a rifle SECOND (from
current location), and move to a new location THIRD.

Attached are the following files:
engine.m  (the main game engine...call this to start a game)
engine_settings.m (all the important info)
player_list.txt  (used to set up games)
dummy.m (very simple bot..random movement, random action)
zombie.m (straight line movement)
sniper.m (a relatively sophisticated bot)
goose.m (my masterpiece)
minelayer.m (stupid, but fun to watch)
teamsnipe.m (they stand still and shoot)

Enjoy!
